// This file is @generated by prost-build.
/// Specifies how subscribed contract_addresses are stored in the KV store for each hook type.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct HookSubscriptions {
    /// The hook type being subscribed to.
    #[prost(enumeration = "HookType", tag = "1")]
    pub hook_type: i32,
    /// Contract addresses subscribed to this hook type.
    #[prost(string, repeated, tag = "2")]
    pub contract_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for HookSubscriptions {
    const NAME: &'static str = "HookSubscriptions";
    const PACKAGE: &'static str = "neutron.harpoon";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.harpoon.HookSubscriptions".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.harpoon.HookSubscriptions".into()
    }
}
/// Hook types that can be subscribed to.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum HookType {
    Unspecified = 0,
    /// Triggered after validator is created
    AfterValidatorCreated = 1,
    /// Triggered before validator is modified
    BeforeValidatorModified = 2,
    /// Triggered after validator is removed
    AfterValidatorRemoved = 3,
    /// Triggered after validator is bonded
    AfterValidatorBonded = 4,
    /// Triggered after validator begins unbonding
    AfterValidatorBeginUnbonding = 5,
    /// Triggered before delegation is created
    BeforeDelegationCreated = 6,
    /// Triggered before delegation's shares are modified
    BeforeDelegationSharesModified = 7,
    /// Triggered before delegation is removed
    BeforeDelegationRemoved = 8,
    /// Triggered after delegation is modified
    AfterDelegationModified = 9,
    /// Triggered before validator is slashed
    BeforeValidatorSlashed = 10,
    /// Triggered after unbonding is initiated
    AfterUnbondingInitiated = 11,
}
impl HookType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "HOOK_TYPE_UNSPECIFIED",
            Self::AfterValidatorCreated => "HOOK_TYPE_AFTER_VALIDATOR_CREATED",
            Self::BeforeValidatorModified => "HOOK_TYPE_BEFORE_VALIDATOR_MODIFIED",
            Self::AfterValidatorRemoved => "HOOK_TYPE_AFTER_VALIDATOR_REMOVED",
            Self::AfterValidatorBonded => "HOOK_TYPE_AFTER_VALIDATOR_BONDED",
            Self::AfterValidatorBeginUnbonding => {
                "HOOK_TYPE_AFTER_VALIDATOR_BEGIN_UNBONDING"
            }
            Self::BeforeDelegationCreated => "HOOK_TYPE_BEFORE_DELEGATION_CREATED",
            Self::BeforeDelegationSharesModified => {
                "HOOK_TYPE_BEFORE_DELEGATION_SHARES_MODIFIED"
            }
            Self::BeforeDelegationRemoved => "HOOK_TYPE_BEFORE_DELEGATION_REMOVED",
            Self::AfterDelegationModified => "HOOK_TYPE_AFTER_DELEGATION_MODIFIED",
            Self::BeforeValidatorSlashed => "HOOK_TYPE_BEFORE_VALIDATOR_SLASHED",
            Self::AfterUnbondingInitiated => "HOOK_TYPE_AFTER_UNBONDING_INITIATED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HOOK_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "HOOK_TYPE_AFTER_VALIDATOR_CREATED" => Some(Self::AfterValidatorCreated),
            "HOOK_TYPE_BEFORE_VALIDATOR_MODIFIED" => Some(Self::BeforeValidatorModified),
            "HOOK_TYPE_AFTER_VALIDATOR_REMOVED" => Some(Self::AfterValidatorRemoved),
            "HOOK_TYPE_AFTER_VALIDATOR_BONDED" => Some(Self::AfterValidatorBonded),
            "HOOK_TYPE_AFTER_VALIDATOR_BEGIN_UNBONDING" => {
                Some(Self::AfterValidatorBeginUnbonding)
            }
            "HOOK_TYPE_BEFORE_DELEGATION_CREATED" => Some(Self::BeforeDelegationCreated),
            "HOOK_TYPE_BEFORE_DELEGATION_SHARES_MODIFIED" => {
                Some(Self::BeforeDelegationSharesModified)
            }
            "HOOK_TYPE_BEFORE_DELEGATION_REMOVED" => Some(Self::BeforeDelegationRemoved),
            "HOOK_TYPE_AFTER_DELEGATION_MODIFIED" => Some(Self::AfterDelegationModified),
            "HOOK_TYPE_BEFORE_VALIDATOR_SLASHED" => Some(Self::BeforeValidatorSlashed),
            "HOOK_TYPE_AFTER_UNBONDING_INITIATED" => Some(Self::AfterUnbondingInitiated),
            _ => None,
        }
    }
}
/// Defines the Msg/ManageHookSubscription request type.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MsgManageHookSubscription {
    /// Address of the governance account.
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// Hook subscription to be updated.
    #[prost(message, optional, tag = "2")]
    pub hook_subscription: ::core::option::Option<HookSubscription>,
}
impl ::prost::Name for MsgManageHookSubscription {
    const NAME: &'static str = "MsgManageHookSubscription";
    const PACKAGE: &'static str = "neutron.harpoon";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.harpoon.MsgManageHookSubscription".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.harpoon.MsgManageHookSubscription".into()
    }
}
/// Defines the response structure for executing a MsgManageHookSubscription message.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MsgManageHookSubscriptionResponse {}
impl ::prost::Name for MsgManageHookSubscriptionResponse {
    const NAME: &'static str = "MsgManageHookSubscriptionResponse";
    const PACKAGE: &'static str = "neutron.harpoon";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.harpoon.MsgManageHookSubscriptionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.harpoon.MsgManageHookSubscriptionResponse".into()
    }
}
/// Specifies new hook subscriptions for the contract_address.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct HookSubscription {
    /// Contract address to update subscriptions for.
    #[prost(string, tag = "2")]
    pub contract_address: ::prost::alloc::string::String,
    /// List of hooks to subscribe to. Hooks not listed here will be removed.
    #[prost(enumeration = "HookType", repeated, tag = "3")]
    pub hooks: ::prost::alloc::vec::Vec<i32>,
}
impl ::prost::Name for HookSubscription {
    const NAME: &'static str = "HookSubscription";
    const PACKAGE: &'static str = "neutron.harpoon";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.harpoon.HookSubscription".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.harpoon.HookSubscription".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Defines the Msg interface of the module.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Updates hook subscriptions for a specific contract address.
        /// To remove a subscription, pass an empty array to `hook_subscription.hooks`.
        /// Can only be executed by the module's authority.
        pub async fn manage_hook_subscription(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgManageHookSubscription>,
        ) -> std::result::Result<
            tonic::Response<super::MsgManageHookSubscriptionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.harpoon.Msg/ManageHookSubscription",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("neutron.harpoon.Msg", "ManageHookSubscription"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod msg_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MsgServer.
    #[async_trait]
    pub trait Msg: std::marker::Send + std::marker::Sync + 'static {
        /// Updates hook subscriptions for a specific contract address.
        /// To remove a subscription, pass an empty array to `hook_subscription.hooks`.
        /// Can only be executed by the module's authority.
        async fn manage_hook_subscription(
            &self,
            request: tonic::Request<super::MsgManageHookSubscription>,
        ) -> std::result::Result<
            tonic::Response<super::MsgManageHookSubscriptionResponse>,
            tonic::Status,
        >;
    }
    /// Defines the Msg interface of the module.
    #[derive(Debug)]
    pub struct MsgServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MsgServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MsgServer<T>
    where
        T: Msg,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/neutron.harpoon.Msg/ManageHookSubscription" => {
                    #[allow(non_camel_case_types)]
                    struct ManageHookSubscriptionSvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgManageHookSubscription>
                    for ManageHookSubscriptionSvc<T> {
                        type Response = super::MsgManageHookSubscriptionResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgManageHookSubscription>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::manage_hook_subscription(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ManageHookSubscriptionSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MsgServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "neutron.harpoon.Msg";
    impl<T> tonic::server::NamedService for MsgServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Request type for the Query/SubscribedContracts RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QuerySubscribedContractsRequest {
    /// The response will include only contract addresses for this hook type.
    #[prost(enumeration = "HookType", tag = "1")]
    pub hook_type: i32,
}
impl ::prost::Name for QuerySubscribedContractsRequest {
    const NAME: &'static str = "QuerySubscribedContractsRequest";
    const PACKAGE: &'static str = "neutron.harpoon";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.harpoon.QuerySubscribedContractsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.harpoon.QuerySubscribedContractsRequest".into()
    }
}
/// Response type for the Query/SubscribedContracts RPC method.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QuerySubscribedContractsResponse {
    /// List of contract addresses subscribed to a specific hook.
    #[prost(string, repeated, tag = "1")]
    pub contract_addresses: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for QuerySubscribedContractsResponse {
    const NAME: &'static str = "QuerySubscribedContractsResponse";
    const PACKAGE: &'static str = "neutron.harpoon";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.harpoon.QuerySubscribedContractsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.harpoon.QuerySubscribedContractsResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Defines the Query interface of the module.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Retrieves contracts subscribed to a specific hook type.
        pub async fn subscribed_contracts(
            &mut self,
            request: impl tonic::IntoRequest<super::QuerySubscribedContractsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySubscribedContractsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.harpoon.Query/SubscribedContracts",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("neutron.harpoon.Query", "SubscribedContracts"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod query_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryServer.
    #[async_trait]
    pub trait Query: std::marker::Send + std::marker::Sync + 'static {
        /// Retrieves contracts subscribed to a specific hook type.
        async fn subscribed_contracts(
            &self,
            request: tonic::Request<super::QuerySubscribedContractsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QuerySubscribedContractsResponse>,
            tonic::Status,
        >;
    }
    /// Defines the Query interface of the module.
    #[derive(Debug)]
    pub struct QueryServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> QueryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryServer<T>
    where
        T: Query,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/neutron.harpoon.Query/SubscribedContracts" => {
                    #[allow(non_camel_case_types)]
                    struct SubscribedContractsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QuerySubscribedContractsRequest>
                    for SubscribedContractsSvc<T> {
                        type Response = super::QuerySubscribedContractsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QuerySubscribedContractsRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::subscribed_contracts(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubscribedContractsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for QueryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "neutron.harpoon.Query";
    impl<T> tonic::server::NamedService for QueryServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Harpoon module genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// List of hooks
    #[prost(message, repeated, tag = "1")]
    pub hook_subscriptions: ::prost::alloc::vec::Vec<HookSubscriptions>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "neutron.harpoon";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.harpoon.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.harpoon.GenesisState".into()
    }
}
