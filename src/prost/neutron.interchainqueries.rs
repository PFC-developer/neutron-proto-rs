// This file is @generated by prost-build.
/// The parameters for the module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// The duration, measured in blocks, that must pass since the query's registration or its last
    /// result submission before the query becomes eligible for removal by anyone. Is used to set
    /// `submit_timeout` on Interchain Query registration.
    #[prost(uint64, tag = "1")]
    pub query_submit_timeout: u64,
    /// Amount of coins required to be provided as deposit on Interchain Query registration.
    #[prost(message, repeated, tag = "2")]
    pub query_deposit: ::prost::alloc::vec::Vec<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
    /// Amount of tx hashes to be removed during a single EndBlock. Can vary to balance between
    /// network cleaning speed and EndBlock duration. A zero value means no limit.
    #[prost(uint64, tag = "3")]
    pub tx_query_removal_limit: u64,
    /// Maximum amount of keys in a registered key value query
    #[prost(uint64, tag = "4")]
    pub max_kv_query_keys_count: u64,
    /// max_transactions_filters defines maximum allowed amount of tx filters in msgRegisterInterchainQuery
    #[prost(uint64, tag = "5")]
    pub max_transactions_filters: u64,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.Params".into()
    }
}
/// Information about an Interchain Query registered in the interchainqueries module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisteredQuery {
    /// The unique id of the registered query.
    #[prost(uint64, tag = "1")]
    pub id: u64,
    /// The address of the contract that registered the query.
    #[prost(string, tag = "2")]
    pub owner: ::prost::alloc::string::String,
    /// The query type identifier: `kv` or `tx`.
    #[prost(string, tag = "3")]
    pub query_type: ::prost::alloc::string::String,
    /// The KV-storage keys for which to get values from the remote chain. Only applicable for the
    /// KV Interchain Queries. Max amount of keys is limited by the module's `max_kv_query_keys_count`
    /// parameters.
    #[prost(message, repeated, tag = "4")]
    pub keys: ::prost::alloc::vec::Vec<KvKey>,
    /// A stringified list of filters for remote transactions search. Only applicable for the TX
    /// Interchain Queries. Example: "\[{"field":"tx.height","op":"Gte","value":2644737}\]".
    /// Supported operators: "eq", "lt", "gt", "lte", "gte". Max amount of filter conditions is limited
    /// by the module's `max_transactions_filters` parameters.
    #[prost(string, tag = "5")]
    pub transactions_filter: ::prost::alloc::string::String,
    /// The IBC connection ID to the remote chain (the source of querying data). Is used for getting
    /// ConsensusState from the respective IBC client to verify query result proofs.
    #[prost(string, tag = "6")]
    pub connection_id: ::prost::alloc::string::String,
    /// Parameter that defines the minimal delay between consecutive query executions (i.e. the
    /// minimal delay between query results update).
    #[prost(uint64, tag = "7")]
    pub update_period: u64,
    /// The local chain block height of the last query results update.
    #[prost(uint64, tag = "8")]
    pub last_submitted_result_local_height: u64,
    /// The remote chain block height that corresponds to the last query result update.
    #[prost(message, optional, tag = "9")]
    pub last_submitted_result_remote_height: ::core::option::Option<
        super::super::ibc::core::client::v1::Height,
    >,
    /// Amount of coins paid for the Interchain Query registration. The deposit is paid back to the
    /// remover. The remover can be either the query owner (during the submit timeout) or anybody.
    #[prost(message, repeated, tag = "10")]
    pub deposit: ::prost::alloc::vec::Vec<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// The duration, measured in blocks, that must pass since the query's registration or its last
    /// result submission before the query becomes eligible for removal by anyone.
    #[prost(uint64, tag = "11")]
    pub submit_timeout: u64,
    /// The local chain block height of the Interchain Query registration.
    #[prost(uint64, tag = "12")]
    pub registered_at_height: u64,
}
impl ::prost::Name for RegisteredQuery {
    const NAME: &'static str = "RegisteredQuery";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.RegisteredQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.RegisteredQuery".into()
    }
}
/// Represents a path to an IAVL storage node.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct KvKey {
    /// The substore name used in an Interchain Query. Typically, this corresponds to the keeper's
    /// storeKey, usually the module's name, such as "bank", "staking", etc.
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
    /// A bytes field representing the key for specific data in the module's storage.
    #[prost(bytes = "vec", tag = "2")]
    pub key: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for KvKey {
    const NAME: &'static str = "KVKey";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.KVKey".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.KVKey".into()
    }
}
/// The interchainqueries module's genesis state model.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// The parameters of the module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    /// A list of registered Interchain Queries.
    #[prost(message, repeated, tag = "2")]
    pub registered_queries: ::prost::alloc::vec::Vec<RegisteredQuery>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.GenesisState".into()
    }
}
/// Request type for the Msg/RegisterInterchainQuery RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgRegisterInterchainQuery {
    /// The query type identifier: `kv` or `tx`.
    #[prost(string, tag = "1")]
    pub query_type: ::prost::alloc::string::String,
    /// The KV-storage keys for which we want to get values from remote chain. Only applicable for the
    /// KV Interchain Queries. Max amount of keys is limited by the module's `max_kv_query_keys_count`
    /// parameters.
    #[prost(message, repeated, tag = "2")]
    pub keys: ::prost::alloc::vec::Vec<KvKey>,
    /// A stringified list of filters for remote transactions search. Only applicable for the TX
    /// Interchain Queries. Example: "\[{"field":"tx.height","op":"Gte","value":2644737}\]".
    /// Supported operators: "eq", "lt", "gt", "lte", "gte". Max amount of filter conditions is
    /// limited by the module's `max_transactions_filters` parameters.
    #[prost(string, tag = "3")]
    pub transactions_filter: ::prost::alloc::string::String,
    /// The IBC connection ID to the remote chain (the source of querying data). Is used for getting
    /// ConsensusState from the respective IBC client to verify query result proofs.
    #[prost(string, tag = "4")]
    pub connection_id: ::prost::alloc::string::String,
    /// Parameter that defines the minimal delay between consecutive query executions (i.e. the
    /// minimal delay between query results update).
    #[prost(uint64, tag = "5")]
    pub update_period: u64,
    /// The signer of the message.
    #[prost(string, tag = "6")]
    pub sender: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgRegisterInterchainQuery {
    const NAME: &'static str = "MsgRegisterInterchainQuery";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.MsgRegisterInterchainQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.MsgRegisterInterchainQuery".into()
    }
}
/// Response type for the Msg/RegisterInterchainQuery RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MsgRegisterInterchainQueryResponse {
    /// The ID assigned to the registered Interchain Query by the module.
    #[prost(uint64, tag = "1")]
    pub id: u64,
}
impl ::prost::Name for MsgRegisterInterchainQueryResponse {
    const NAME: &'static str = "MsgRegisterInterchainQueryResponse";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.MsgRegisterInterchainQueryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.MsgRegisterInterchainQueryResponse".into()
    }
}
/// Request type for the Msg/SubmitQueryResult RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSubmitQueryResult {
    /// The ID of the Interchain Query.
    #[prost(uint64, tag = "1")]
    pub query_id: u64,
    /// The signer of the message.
    #[prost(string, tag = "2")]
    pub sender: ::prost::alloc::string::String,
    /// The IBC client ID that corresponds to the IBC connection to the remote chain (where the
    /// query result is coming from).
    /// Deprecated: populating this field does not make any affect
    #[deprecated]
    #[prost(string, tag = "3")]
    pub client_id: ::prost::alloc::string::String,
    /// The result of the Interchain Query execution.
    #[prost(message, optional, tag = "4")]
    pub result: ::core::option::Option<QueryResult>,
}
impl ::prost::Name for MsgSubmitQueryResult {
    const NAME: &'static str = "MsgSubmitQueryResult";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.MsgSubmitQueryResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.MsgSubmitQueryResult".into()
    }
}
/// Contains different information about a single Interchain Query execution result. Currently,
/// this structure is used both in query result submission via an ICQ Relayer and as a query result
/// storage for read/write operations to interchainqueries module, but the structure fields are
/// populated in a bit different ways. When submitting a query result, all fields are populated and
/// provided to the interchainqueries module in order to verify the result against the IBC client's
/// state. But in order to lighten the chain state, the interchainqueries module removes the block
/// field and proofs from the kv_results.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryResult {
    /// A list of a KV Interchain Query execution results. Each result contains query parameters, a
    /// response value and a proof.
    #[prost(message, repeated, tag = "1")]
    pub kv_results: ::prost::alloc::vec::Vec<StorageValue>,
    /// A TX Interchain Query execution result. Contains metainformation about the blocks of the query
    /// execution height. Only populated when submitting an Interchain Query result for verification
    /// and emptied when saving the result on chain.
    #[prost(message, optional, tag = "2")]
    pub block: ::core::option::Option<Block>,
    /// The height of the chain at the moment of the Interchain Query execution.
    #[prost(uint64, tag = "3")]
    pub height: u64,
    /// The revision number of the chain at the moment of the Interchain Query execution.
    #[prost(uint64, tag = "4")]
    pub revision: u64,
    /// Whether to send the query result to the owner contract as a sudo message. Only applicable for
    /// KV type of Interchain Queries.
    #[prost(bool, tag = "5")]
    pub allow_kv_callbacks: bool,
}
impl ::prost::Name for QueryResult {
    const NAME: &'static str = "QueryResult";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.QueryResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.QueryResult".into()
    }
}
/// A verifiable result of performing a single KVKey read.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StorageValue {
    /// The substore name used in the read operation. Typically, this corresponds to the keeper's
    /// storeKey, usually the module's name, such as "bank", "staking", etc.
    #[prost(string, tag = "1")]
    pub storage_prefix: ::prost::alloc::string::String,
    /// A bytes field representing the key of the data read from the module's storage.
    #[prost(bytes = "vec", tag = "2")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    /// A bytes field containing the value associated with the key in the store.
    #[prost(bytes = "vec", tag = "3")]
    pub value: ::prost::alloc::vec::Vec<u8>,
    /// The Merkle Proof which proves existence/nonexistence of key-value pair in IAVL storage. Is
    /// used to verify
    /// the pair against the respective remote chain's header.
    #[prost(message, optional, tag = "4")]
    pub proof: ::core::option::Option<::tendermint_proto::crypto::ProofOps>,
}
impl ::prost::Name for StorageValue {
    const NAME: &'static str = "StorageValue";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.StorageValue".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.StorageValue".into()
    }
}
/// A single verifiable result of an Interchain Query of TX type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Block {
    /// The header of the block next to the block the transaction is included in. It is needed to know
    /// block X+1 header to verify response of transaction for block X since LastResultsHash is root
    /// hash of all results of the txs from the previous block.
    #[prost(message, optional, tag = "1")]
    pub next_block_header: ::core::option::Option<
        ::tendermint_proto::google::protobuf::Any,
    >,
    /// The header of the block the transaction is included in. It is needed to know block header to
    /// verify inclusion of the transaction.
    #[prost(message, optional, tag = "2")]
    pub header: ::core::option::Option<::tendermint_proto::google::protobuf::Any>,
    /// The transaction matched by the Interchain Query's transaction filter.
    #[prost(message, optional, tag = "3")]
    pub tx: ::core::option::Option<TxValue>,
}
impl ::prost::Name for Block {
    const NAME: &'static str = "Block";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.Block".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.Block".into()
    }
}
/// Contains transaction body, response, and proofs of inclusion and delivery.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TxValue {
    /// The result of the transaction execution.
    #[prost(message, optional, tag = "1")]
    pub response: ::core::option::Option<::tendermint_proto::abci::ExecTxResult>,
    /// The Merkle Proof which proves existence of response in the block next to the block the
    /// transaction is included in.
    #[prost(message, optional, tag = "2")]
    pub delivery_proof: ::core::option::Option<::tendermint_proto::crypto::Proof>,
    /// The Merkle Proof which proves inclusion of the transaction in the block.
    #[prost(message, optional, tag = "3")]
    pub inclusion_proof: ::core::option::Option<::tendermint_proto::crypto::Proof>,
    /// The arbitrary data typed body of the transaction.
    #[prost(bytes = "vec", tag = "4")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for TxValue {
    const NAME: &'static str = "TxValue";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.TxValue".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.TxValue".into()
    }
}
/// Response type for the Msg/SubmitQueryResult RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MsgSubmitQueryResultResponse {}
impl ::prost::Name for MsgSubmitQueryResultResponse {
    const NAME: &'static str = "MsgSubmitQueryResultResponse";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.MsgSubmitQueryResultResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.MsgSubmitQueryResultResponse".into()
    }
}
/// Request type for the Msg/RemoveInterchainQuery RPC method.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MsgRemoveInterchainQueryRequest {
    /// The ID of the query to remove.
    #[prost(uint64, tag = "1")]
    pub query_id: u64,
    /// The signer of the message.
    #[prost(string, tag = "2")]
    pub sender: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgRemoveInterchainQueryRequest {
    const NAME: &'static str = "MsgRemoveInterchainQueryRequest";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.MsgRemoveInterchainQueryRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.MsgRemoveInterchainQueryRequest".into()
    }
}
/// Response type for the Msg/RemoveInterchainQuery RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MsgRemoveInterchainQueryResponse {}
impl ::prost::Name for MsgRemoveInterchainQueryResponse {
    const NAME: &'static str = "MsgRemoveInterchainQueryResponse";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.MsgRemoveInterchainQueryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.MsgRemoveInterchainQueryResponse".into()
    }
}
/// Request type for the Msg/UpdateInterchainQuery RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateInterchainQueryRequest {
    /// The ID of the query to update.
    #[prost(uint64, tag = "1")]
    pub query_id: u64,
    /// A new list of KV-storage keys for which to get values from the remote chain. Only applicable
    /// for a KV Interchain Query. Max amount of keys is limited by the module's `max_kv_query_keys_count`
    /// parameters.
    #[prost(message, repeated, tag = "2")]
    pub new_keys: ::prost::alloc::vec::Vec<KvKey>,
    /// A new minimal delay between consecutive query executions.
    #[prost(uint64, tag = "3")]
    pub new_update_period: u64,
    /// A new list of filters for remote transactions search. Only applicable for a TX Interchain
    /// Query. Example: "\[{"field":"tx.height","op":"Gte","value":2644737}\]".
    /// Supported operators: "eq", "lt", "gt", "lte", "gte". Max amount of filter conditions is
    /// limited by the module's `max_transactions_filters` parameters.
    #[prost(string, tag = "4")]
    pub new_transactions_filter: ::prost::alloc::string::String,
    /// The signer of the message.
    #[prost(string, tag = "5")]
    pub sender: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgUpdateInterchainQueryRequest {
    const NAME: &'static str = "MsgUpdateInterchainQueryRequest";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.MsgUpdateInterchainQueryRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.MsgUpdateInterchainQueryRequest".into()
    }
}
/// Response type for the Msg/UpdateInterchainQuery RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MsgUpdateInterchainQueryResponse {}
impl ::prost::Name for MsgUpdateInterchainQueryResponse {
    const NAME: &'static str = "MsgUpdateInterchainQueryResponse";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.MsgUpdateInterchainQueryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.MsgUpdateInterchainQueryResponse".into()
    }
}
/// Request type for the Msg/UpdateParams RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// The address of the authority of the module.
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The new parameters of the module. All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.MsgUpdateParams".into()
    }
}
/// Response type for the Msg/UpdateParams RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
impl ::prost::Name for MsgUpdateParamsResponse {
    const NAME: &'static str = "MsgUpdateParamsResponse";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.MsgUpdateParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.MsgUpdateParamsResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Defines the Msg interface of the module.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Registers a new Interchain Query in the `interchainqueries` module. This message should only
        /// be issued by a smart contract. The calling contract is automatically charged a query
        /// registration deposit, based on the module's query deposit parameter. The deposit is refunded
        /// when the query is removed. Ensure the contract's account has sufficient assets at the time of
        /// message execution.
        ///
        /// The response includes the ID assigned to the registered query. Use a reply handler to process
        /// this response and utilize the query ID.
        pub async fn register_interchain_query(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgRegisterInterchainQuery>,
        ) -> std::result::Result<
            tonic::Response<super::MsgRegisterInterchainQueryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.interchainqueries.Msg/RegisterInterchainQuery",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "neutron.interchainqueries.Msg",
                        "RegisterInterchainQuery",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Submits the result of an Interchain Query execution to the chain. Handling this message may
        /// involve forwarding the result to the smart contract that owns the query for processing, which
        /// could require significant gas usage.
        pub async fn submit_query_result(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSubmitQueryResult>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSubmitQueryResultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.interchainqueries.Msg/SubmitQueryResult",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("neutron.interchainqueries.Msg", "SubmitQueryResult"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Removes a specific Interchain Query and its results from the module. The query can only be
        /// removed by its owner during the query's submit timeout. After the timeout, anyone can remove
        /// it. Upon successful removal, the query deposit is refunded to the caller.
        pub async fn remove_interchain_query(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgRemoveInterchainQueryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MsgRemoveInterchainQueryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.interchainqueries.Msg/RemoveInterchainQuery",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "neutron.interchainqueries.Msg",
                        "RemoveInterchainQuery",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates the parameters of a registered Interchain Query. This action can only be performed by
        /// the query's owner.
        pub async fn update_interchain_query(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateInterchainQueryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateInterchainQueryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.interchainqueries.Msg/UpdateInterchainQuery",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "neutron.interchainqueries.Msg",
                        "UpdateInterchainQuery",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Updates the parameters of the `interchainqueries` module. This action can only be performed
        /// by the module's authority.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.interchainqueries.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("neutron.interchainqueries.Msg", "UpdateParams"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod msg_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MsgServer.
    #[async_trait]
    pub trait Msg: std::marker::Send + std::marker::Sync + 'static {
        /// Registers a new Interchain Query in the `interchainqueries` module. This message should only
        /// be issued by a smart contract. The calling contract is automatically charged a query
        /// registration deposit, based on the module's query deposit parameter. The deposit is refunded
        /// when the query is removed. Ensure the contract's account has sufficient assets at the time of
        /// message execution.
        ///
        /// The response includes the ID assigned to the registered query. Use a reply handler to process
        /// this response and utilize the query ID.
        async fn register_interchain_query(
            &self,
            request: tonic::Request<super::MsgRegisterInterchainQuery>,
        ) -> std::result::Result<
            tonic::Response<super::MsgRegisterInterchainQueryResponse>,
            tonic::Status,
        >;
        /// Submits the result of an Interchain Query execution to the chain. Handling this message may
        /// involve forwarding the result to the smart contract that owns the query for processing, which
        /// could require significant gas usage.
        async fn submit_query_result(
            &self,
            request: tonic::Request<super::MsgSubmitQueryResult>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSubmitQueryResultResponse>,
            tonic::Status,
        >;
        /// Removes a specific Interchain Query and its results from the module. The query can only be
        /// removed by its owner during the query's submit timeout. After the timeout, anyone can remove
        /// it. Upon successful removal, the query deposit is refunded to the caller.
        async fn remove_interchain_query(
            &self,
            request: tonic::Request<super::MsgRemoveInterchainQueryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MsgRemoveInterchainQueryResponse>,
            tonic::Status,
        >;
        /// Updates the parameters of a registered Interchain Query. This action can only be performed by
        /// the query's owner.
        async fn update_interchain_query(
            &self,
            request: tonic::Request<super::MsgUpdateInterchainQueryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateInterchainQueryResponse>,
            tonic::Status,
        >;
        /// Updates the parameters of the `interchainqueries` module. This action can only be performed
        /// by the module's authority.
        async fn update_params(
            &self,
            request: tonic::Request<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        >;
    }
    /// Defines the Msg interface of the module.
    #[derive(Debug)]
    pub struct MsgServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MsgServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MsgServer<T>
    where
        T: Msg,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/neutron.interchainqueries.Msg/RegisterInterchainQuery" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterInterchainQuerySvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgRegisterInterchainQuery>
                    for RegisterInterchainQuerySvc<T> {
                        type Response = super::MsgRegisterInterchainQueryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgRegisterInterchainQuery>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::register_interchain_query(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterInterchainQuerySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/neutron.interchainqueries.Msg/SubmitQueryResult" => {
                    #[allow(non_camel_case_types)]
                    struct SubmitQueryResultSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgSubmitQueryResult>
                    for SubmitQueryResultSvc<T> {
                        type Response = super::MsgSubmitQueryResultResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgSubmitQueryResult>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::submit_query_result(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SubmitQueryResultSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/neutron.interchainqueries.Msg/RemoveInterchainQuery" => {
                    #[allow(non_camel_case_types)]
                    struct RemoveInterchainQuerySvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgRemoveInterchainQueryRequest>
                    for RemoveInterchainQuerySvc<T> {
                        type Response = super::MsgRemoveInterchainQueryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::MsgRemoveInterchainQueryRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::remove_interchain_query(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RemoveInterchainQuerySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/neutron.interchainqueries.Msg/UpdateInterchainQuery" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateInterchainQuerySvc<T: Msg>(pub Arc<T>);
                    impl<
                        T: Msg,
                    > tonic::server::UnaryService<super::MsgUpdateInterchainQueryRequest>
                    for UpdateInterchainQuerySvc<T> {
                        type Response = super::MsgUpdateInterchainQueryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::MsgUpdateInterchainQueryRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::update_interchain_query(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateInterchainQuerySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/neutron.interchainqueries.Msg/UpdateParams" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateParamsSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgUpdateParams>
                    for UpdateParamsSvc<T> {
                        type Response = super::MsgUpdateParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgUpdateParams>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::update_params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateParamsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MsgServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "neutron.interchainqueries.Msg";
    impl<T> tonic::server::NamedService for MsgServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Request type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.QueryParamsRequest".into()
    }
}
/// Response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// Contains all parameters of the module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.QueryParamsResponse".into()
    }
}
/// Request type for the Query/RegisteredQueries RPC method.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryRegisteredQueriesRequest {
    /// A list of owners of Interchain Queries. Query response will contain only Interchain Queries
    /// that are owned by one of the owners in the list. If none, Interchain Queries are not filtered
    /// out by the owner field.
    #[prost(string, repeated, tag = "1")]
    pub owners: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// IBC connection ID. Query response will contain only Interchain Queries that have the same IBC
    /// connection ID parameter. If none, Interchain Queries are not filtered out by the connection ID
    /// field.
    #[prost(string, tag = "2")]
    pub connection_id: ::prost::alloc::string::String,
    /// Pagination parameters for the request. Use values from previous response in the next request
    /// in consecutive requests with paginated responses.
    #[prost(message, optional, tag = "3")]
    pub pagination: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryRegisteredQueriesRequest {
    const NAME: &'static str = "QueryRegisteredQueriesRequest";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.QueryRegisteredQueriesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.QueryRegisteredQueriesRequest".into()
    }
}
/// Response type for the Query/RegisteredQueries RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRegisteredQueriesResponse {
    /// A list of registered Interchain Queries.
    #[prost(message, repeated, tag = "1")]
    pub registered_queries: ::prost::alloc::vec::Vec<RegisteredQuery>,
    /// Current page information. Use values from previous response in the next request in consecutive
    /// requests with paginated responses.
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryRegisteredQueriesResponse {
    const NAME: &'static str = "QueryRegisteredQueriesResponse";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.QueryRegisteredQueriesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.QueryRegisteredQueriesResponse".into()
    }
}
/// Request type for the Query/RegisteredQuery RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryRegisteredQueryRequest {
    /// ID of an Interchain Query.
    #[prost(uint64, tag = "1")]
    pub query_id: u64,
}
impl ::prost::Name for QueryRegisteredQueryRequest {
    const NAME: &'static str = "QueryRegisteredQueryRequest";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.QueryRegisteredQueryRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.QueryRegisteredQueryRequest".into()
    }
}
/// Response type for the Query/RegisteredQuery RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRegisteredQueryResponse {
    /// A registered Interchain Query.
    #[prost(message, optional, tag = "1")]
    pub registered_query: ::core::option::Option<RegisteredQuery>,
}
impl ::prost::Name for QueryRegisteredQueryResponse {
    const NAME: &'static str = "QueryRegisteredQueryResponse";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.QueryRegisteredQueryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.QueryRegisteredQueryResponse".into()
    }
}
/// Request type for the Query/QueryResult RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryRegisteredQueryResultRequest {
    /// ID of an Interchain Query.
    #[prost(uint64, tag = "1")]
    pub query_id: u64,
}
impl ::prost::Name for QueryRegisteredQueryResultRequest {
    const NAME: &'static str = "QueryRegisteredQueryResultRequest";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.QueryRegisteredQueryResultRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.QueryRegisteredQueryResultRequest".into()
    }
}
/// Response type for the Query/QueryResult RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRegisteredQueryResultResponse {
    /// The last successfully submitted result of an Interchain Query.
    #[prost(message, optional, tag = "1")]
    pub result: ::core::option::Option<QueryResult>,
}
impl ::prost::Name for QueryRegisteredQueryResultResponse {
    const NAME: &'static str = "QueryRegisteredQueryResultResponse";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.QueryRegisteredQueryResultResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.QueryRegisteredQueryResultResponse".into()
    }
}
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Transaction {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(uint64, tag = "2")]
    pub height: u64,
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for Transaction {
    const NAME: &'static str = "Transaction";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.Transaction".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.Transaction".into()
    }
}
/// Request type for the Query/LastRemoteHeight RPC method.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryLastRemoteHeight {
    /// Connection ID of an IBC connection to a remote chain. Determines the IBC client used in query
    /// handling.
    #[prost(string, tag = "1")]
    pub connection_id: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryLastRemoteHeight {
    const NAME: &'static str = "QueryLastRemoteHeight";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.QueryLastRemoteHeight".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.QueryLastRemoteHeight".into()
    }
}
/// Response type for the Query/LastRemoteHeight RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryLastRemoteHeightResponse {
    /// The height of the chain that the IBC client is currently on.
    #[prost(uint64, tag = "1")]
    pub height: u64,
    /// The revision of the chain that the IBC client is currently on.
    #[prost(uint64, tag = "2")]
    pub revision: u64,
}
impl ::prost::Name for QueryLastRemoteHeightResponse {
    const NAME: &'static str = "QueryLastRemoteHeightResponse";
    const PACKAGE: &'static str = "neutron.interchainqueries";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.interchainqueries.QueryLastRemoteHeightResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.interchainqueries.QueryLastRemoteHeightResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Defines the Query interface of the module.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Fetches the current parameters of the interchainqueries module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.interchainqueries.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("neutron.interchainqueries.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// Retrieves all registered Interchain Queries in the module, with optional filtering by owner
        /// and/or connection ID.
        pub async fn registered_queries(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryRegisteredQueriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryRegisteredQueriesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.interchainqueries.Query/RegisteredQueries",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "neutron.interchainqueries.Query",
                        "RegisteredQueries",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Fetches details of a registered Interchain Query using its ID.
        pub async fn registered_query(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryRegisteredQueryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryRegisteredQueryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.interchainqueries.Query/RegisteredQuery",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("neutron.interchainqueries.Query", "RegisteredQuery"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Retrieves the most recent successfully submitted result of an Interchain Query. This is only
        /// applicable for KV Interchain Queries.
        pub async fn query_result(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryRegisteredQueryResultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryRegisteredQueryResultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.interchainqueries.Query/QueryResult",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("neutron.interchainqueries.Query", "QueryResult"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Retrieves the most recent height of a remote chain as known by the IBC client associated with
        /// a given connection ID.
        pub async fn last_remote_height(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryLastRemoteHeight>,
        ) -> std::result::Result<
            tonic::Response<super::QueryLastRemoteHeightResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.interchainqueries.Query/LastRemoteHeight",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "neutron.interchainqueries.Query",
                        "LastRemoteHeight",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod query_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryServer.
    #[async_trait]
    pub trait Query: std::marker::Send + std::marker::Sync + 'static {
        /// Fetches the current parameters of the interchainqueries module.
        async fn params(
            &self,
            request: tonic::Request<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        >;
        /// Retrieves all registered Interchain Queries in the module, with optional filtering by owner
        /// and/or connection ID.
        async fn registered_queries(
            &self,
            request: tonic::Request<super::QueryRegisteredQueriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryRegisteredQueriesResponse>,
            tonic::Status,
        >;
        /// Fetches details of a registered Interchain Query using its ID.
        async fn registered_query(
            &self,
            request: tonic::Request<super::QueryRegisteredQueryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryRegisteredQueryResponse>,
            tonic::Status,
        >;
        /// Retrieves the most recent successfully submitted result of an Interchain Query. This is only
        /// applicable for KV Interchain Queries.
        async fn query_result(
            &self,
            request: tonic::Request<super::QueryRegisteredQueryResultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryRegisteredQueryResultResponse>,
            tonic::Status,
        >;
        /// Retrieves the most recent height of a remote chain as known by the IBC client associated with
        /// a given connection ID.
        async fn last_remote_height(
            &self,
            request: tonic::Request<super::QueryLastRemoteHeight>,
        ) -> std::result::Result<
            tonic::Response<super::QueryLastRemoteHeightResponse>,
            tonic::Status,
        >;
    }
    /// Defines the Query interface of the module.
    #[derive(Debug)]
    pub struct QueryServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> QueryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryServer<T>
    where
        T: Query,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/neutron.interchainqueries.Query/Params" => {
                    #[allow(non_camel_case_types)]
                    struct ParamsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryParamsRequest>
                    for ParamsSvc<T> {
                        type Response = super::QueryParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryParamsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ParamsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/neutron.interchainqueries.Query/RegisteredQueries" => {
                    #[allow(non_camel_case_types)]
                    struct RegisteredQueriesSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryRegisteredQueriesRequest>
                    for RegisteredQueriesSvc<T> {
                        type Response = super::QueryRegisteredQueriesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryRegisteredQueriesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::registered_queries(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisteredQueriesSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/neutron.interchainqueries.Query/RegisteredQuery" => {
                    #[allow(non_camel_case_types)]
                    struct RegisteredQuerySvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryRegisteredQueryRequest>
                    for RegisteredQuerySvc<T> {
                        type Response = super::QueryRegisteredQueryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryRegisteredQueryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::registered_query(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisteredQuerySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/neutron.interchainqueries.Query/QueryResult" => {
                    #[allow(non_camel_case_types)]
                    struct QueryResultSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<
                        super::QueryRegisteredQueryResultRequest,
                    > for QueryResultSvc<T> {
                        type Response = super::QueryRegisteredQueryResultResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::QueryRegisteredQueryResultRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::query_result(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryResultSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/neutron.interchainqueries.Query/LastRemoteHeight" => {
                    #[allow(non_camel_case_types)]
                    struct LastRemoteHeightSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryLastRemoteHeight>
                    for LastRemoteHeightSvc<T> {
                        type Response = super::QueryLastRemoteHeightResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryLastRemoteHeight>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::last_remote_height(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = LastRemoteHeightSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for QueryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "neutron.interchainqueries.Query";
    impl<T> tonic::server::NamedService for QueryServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
