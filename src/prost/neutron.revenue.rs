// This file is @generated by prost-build.
/// Defines the parameters for the module.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct Params {
    /// The asset used in revenue payments to validators. Expected to be a native token of the chain
    /// with its denom metadata registered in the bank module. The denom metadata must have a defined
    /// symbol field and contain a denom unit with an alias equal to the symbol and a specified
    /// exponent.
    #[prost(string, tag = "1")]
    pub reward_asset: ::prost::alloc::string::String,
    /// Quotation of the reward asset.
    #[prost(message, optional, tag = "2")]
    pub reward_quote: ::core::option::Option<RewardQuote>,
    /// Specifies performance requirements for validators in scope of blocks signing and creation. If
    /// not met, the validator is not rewarded.
    #[prost(message, optional, tag = "3")]
    pub blocks_performance_requirement: ::core::option::Option<PerformanceRequirement>,
    /// Specifies performance requirements for validators in scope of the oracle price votes. If not
    /// met, the validator is not rewarded.
    #[prost(message, optional, tag = "4")]
    pub oracle_votes_performance_requirement: ::core::option::Option<
        PerformanceRequirement,
    >,
    /// Indicates the currently active type of payment schedule.
    #[prost(message, optional, tag = "5")]
    pub payment_schedule_type: ::core::option::Option<PaymentScheduleType>,
    /// The time window, in seconds, used to calculate the TWAP of the reward asset.
    #[prost(int64, tag = "6")]
    pub twap_window: i64,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.Params".into()
    }
}
/// Defines information about the reward quote.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RewardQuote {
    /// The compensation amount measured in the quote asset. The amount is divided by the price of
    /// the reward asset to determine the base revenue amount.
    #[prost(uint64, tag = "1")]
    pub amount: u64,
    /// The name of the quote asset. It is used as a quote in price queries to the slinky oracle
    /// module to determine the price of the reward asset.
    #[prost(string, tag = "2")]
    pub asset: ::prost::alloc::string::String,
}
impl ::prost::Name for RewardQuote {
    const NAME: &'static str = "RewardQuote";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.RewardQuote".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.RewardQuote".into()
    }
}
/// A model that contains information specific to the currently active payment schedule type. The
/// oneof implementations define the payment schedule that must be used currently.
/// This is a module's parameter. It's not updated automatically in runtime in contrast to the
/// payment schedule which is a state variable, but is updated via MsgUpdateParams.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PaymentScheduleType {
    #[prost(oneof = "payment_schedule_type::PaymentScheduleType", tags = "4, 5, 6")]
    pub payment_schedule_type: ::core::option::Option<
        payment_schedule_type::PaymentScheduleType,
    >,
}
/// Nested message and enum types in `PaymentScheduleType`.
pub mod payment_schedule_type {
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum PaymentScheduleType {
        #[prost(message, tag = "4")]
        MonthlyPaymentScheduleType(super::MonthlyPaymentScheduleType),
        #[prost(message, tag = "5")]
        BlockBasedPaymentScheduleType(super::BlockBasedPaymentScheduleType),
        #[prost(message, tag = "6")]
        EmptyPaymentScheduleType(super::EmptyPaymentScheduleType),
    }
}
impl ::prost::Name for PaymentScheduleType {
    const NAME: &'static str = "PaymentScheduleType";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.PaymentScheduleType".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.PaymentScheduleType".into()
    }
}
/// Monthly periods with payments made at the end of each month.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MonthlyPaymentScheduleType {}
impl ::prost::Name for MonthlyPaymentScheduleType {
    const NAME: &'static str = "MonthlyPaymentScheduleType";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.MonthlyPaymentScheduleType".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.MonthlyPaymentScheduleType".into()
    }
}
/// Periods defined by a specific number of blocks, with payments made when the required block
/// count is reached.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BlockBasedPaymentScheduleType {
    /// The number of blocks in a payment period.
    #[prost(uint64, tag = "1")]
    pub blocks_per_period: u64,
}
impl ::prost::Name for BlockBasedPaymentScheduleType {
    const NAME: &'static str = "BlockBasedPaymentScheduleType";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.BlockBasedPaymentScheduleType".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.BlockBasedPaymentScheduleType".into()
    }
}
/// Endless periods with payments never made.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EmptyPaymentScheduleType {}
impl ::prost::Name for EmptyPaymentScheduleType {
    const NAME: &'static str = "EmptyPaymentScheduleType";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.EmptyPaymentScheduleType".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.EmptyPaymentScheduleType".into()
    }
}
/// Specifies a performance criteria that validators must meet to qualify for network rewards.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PerformanceRequirement {
    /// The fraction of the total performance a validator can miss without affecting their reward.
    /// Represented as a decimal value in the range \[0.0, 1.0\], where 1.0 corresponds to 100%.
    #[prost(string, tag = "1")]
    pub allowed_to_miss: ::prost::alloc::string::String,
    /// The minimum fraction of the total performance a validator must achieve to be eligible for
    /// network rewards. Validators falling below this threshold will not receive any rewards.
    /// Represented as a decimal value in the range \[0.0, 1.0\], where 1.0 corresponds to 100%.
    #[prost(string, tag = "2")]
    pub required_at_least: ::prost::alloc::string::String,
}
impl ::prost::Name for PerformanceRequirement {
    const NAME: &'static str = "PerformanceRequirement";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.PerformanceRequirement".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.PerformanceRequirement".into()
    }
}
/// Defines the revenue module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// Revenue module parameters.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    /// The current payment schedule. If nil, the module will use the respective payment schedule for
    /// the payment schedule type specified in the params.
    #[prost(message, optional, tag = "2")]
    pub payment_schedule: ::core::option::Option<PaymentSchedule>,
    /// Revenue module list of validators.
    #[prost(message, repeated, tag = "3")]
    pub validators: ::prost::alloc::vec::Vec<ValidatorInfo>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.GenesisState".into()
    }
}
/// A model that contains information specific to the currently active payment schedule. The oneof
/// implementations define conditions for payment periods ending and track the progress of the
/// current payment period. This is a module's state variable.
/// The inner oneof must correspond with the respective payment schedule type defined in the module
/// params. In runtime, on a mismatch due to e.g. MsgUpdateParams execution, the module will switch
/// to the payment schedule that corresponds to the payment schedule type automatically.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PaymentSchedule {
    #[prost(oneof = "payment_schedule::PaymentSchedule", tags = "1, 2, 3")]
    pub payment_schedule: ::core::option::Option<payment_schedule::PaymentSchedule>,
}
/// Nested message and enum types in `PaymentSchedule`.
pub mod payment_schedule {
    #[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Oneof)]
    pub enum PaymentSchedule {
        #[prost(message, tag = "1")]
        MonthlyPaymentSchedule(super::MonthlyPaymentSchedule),
        #[prost(message, tag = "2")]
        BlockBasedPaymentSchedule(super::BlockBasedPaymentSchedule),
        #[prost(message, tag = "3")]
        EmptyPaymentSchedule(super::EmptyPaymentSchedule),
    }
}
impl ::prost::Name for PaymentSchedule {
    const NAME: &'static str = "PaymentSchedule";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.PaymentSchedule".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.PaymentSchedule".into()
    }
}
/// Contains information about a validator.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ValidatorInfo {
    /// The validator's node operator address.
    #[prost(string, tag = "1")]
    pub val_oper_address: ::prost::alloc::string::String,
    /// The number of blocks the validator has committed in the current payment period.
    #[prost(uint64, tag = "2")]
    pub commited_blocks_in_period: u64,
    /// The number of oracle votes the validator has submitted in the current payment period.
    #[prost(uint64, tag = "3")]
    pub commited_oracle_votes_in_period: u64,
    /// The number of blocks the validator has remained in the active validator set for in the
    /// current payment period.
    #[prost(uint64, tag = "4")]
    pub in_active_valset_for_blocks_in_period: u64,
}
impl ::prost::Name for ValidatorInfo {
    const NAME: &'static str = "ValidatorInfo";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.ValidatorInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.ValidatorInfo".into()
    }
}
/// Represents a payment schedule where revenue payments are processed once a month.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MonthlyPaymentSchedule {
    /// The block height at which the current month started.
    #[prost(uint64, tag = "1")]
    pub current_month_start_block: u64,
    /// The timestamp of the block at which the current month started.
    #[prost(uint64, tag = "2")]
    pub current_month_start_block_ts: u64,
}
impl ::prost::Name for MonthlyPaymentSchedule {
    const NAME: &'static str = "MonthlyPaymentSchedule";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.MonthlyPaymentSchedule".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.MonthlyPaymentSchedule".into()
    }
}
/// Represents a payment schedule where revenue payments are processed after a specified number
/// of blocks.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct BlockBasedPaymentSchedule {
    /// The number of blocks in each payment period.
    #[prost(uint64, tag = "1")]
    pub blocks_per_period: u64,
    /// The block height at which the current payment period started.
    #[prost(uint64, tag = "2")]
    pub current_period_start_block: u64,
}
impl ::prost::Name for BlockBasedPaymentSchedule {
    const NAME: &'static str = "BlockBasedPaymentSchedule";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.BlockBasedPaymentSchedule".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.BlockBasedPaymentSchedule".into()
    }
}
/// Represents a payment schedule where revenue is never distributed.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct EmptyPaymentSchedule {}
impl ::prost::Name for EmptyPaymentSchedule {
    const NAME: &'static str = "EmptyPaymentSchedule";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.EmptyPaymentSchedule".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.EmptyPaymentSchedule".into()
    }
}
/// Represents a data structure that tracks the cumulative price of an asset over the entire
/// observation period, along with the last absolute asset price and the timestamp when this
/// price was last recorded.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct RewardAssetPrice {
    /// The cumulative price of the reward asset within the TWAP window. It is calculated as:
    /// `cumulative_price_at_timestamp_t(n)` = `last_price_at_t(n-1)` * (t(n) - t(n-1)) + `cumulative_price_at_timestamp_t(n-1)`
    #[prost(string, tag = "1")]
    pub cumulative_price: ::prost::alloc::string::String,
    /// The price of the reward asset in reward quote asset that corresponds to the timestamp.
    #[prost(string, tag = "2")]
    pub absolute_price: ::prost::alloc::string::String,
    /// The timestamp of the last update of the absolute and cumulative price.
    #[prost(int64, tag = "3")]
    pub timestamp: i64,
}
impl ::prost::Name for RewardAssetPrice {
    const NAME: &'static str = "RewardAssetPrice";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.RewardAssetPrice".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.RewardAssetPrice".into()
    }
}
/// Request type for the Msg/UpdateParams RPC method.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MsgUpdateParams {
    /// The address of the authority of the module.
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The new parameters of the module. All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.MsgUpdateParams".into()
    }
}
/// Response type for the Msg/UpdateParams RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
impl ::prost::Name for MsgUpdateParamsResponse {
    const NAME: &'static str = "MsgUpdateParamsResponse";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.MsgUpdateParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.MsgUpdateParamsResponse".into()
    }
}
/// Request type for the Msg/FundTreasury RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgFundTreasury {
    /// The signer of the message.
    #[prost(string, tag = "1")]
    pub sender: ::prost::alloc::string::String,
    /// The amount of coins to fund the revenue treasury pool with. Must match the reward asset denom.
    #[prost(message, repeated, tag = "2")]
    pub amount: ::prost::alloc::vec::Vec<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for MsgFundTreasury {
    const NAME: &'static str = "MsgFundTreasury";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.MsgFundTreasury".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.MsgFundTreasury".into()
    }
}
/// Response type for the Msg/FundTreasury RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct MsgFundTreasuryResponse {}
impl ::prost::Name for MsgFundTreasuryResponse {
    const NAME: &'static str = "MsgFundTreasuryResponse";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.MsgFundTreasuryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.MsgFundTreasuryResponse".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Defines the Msg interface of the module.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Updates the parameters of the revenue module. This action can only be performed by the
        /// module's authority.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.revenue.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("neutron.revenue.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
        /// FundTreasury funds the revenue treasury module account with the specified amount.
        pub async fn fund_treasury(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgFundTreasury>,
        ) -> std::result::Result<
            tonic::Response<super::MsgFundTreasuryResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.revenue.Msg/FundTreasury",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("neutron.revenue.Msg", "FundTreasury"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod msg_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MsgServer.
    #[async_trait]
    pub trait Msg: std::marker::Send + std::marker::Sync + 'static {
        /// Updates the parameters of the revenue module. This action can only be performed by the
        /// module's authority.
        async fn update_params(
            &self,
            request: tonic::Request<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        >;
        /// FundTreasury funds the revenue treasury module account with the specified amount.
        async fn fund_treasury(
            &self,
            request: tonic::Request<super::MsgFundTreasury>,
        ) -> std::result::Result<
            tonic::Response<super::MsgFundTreasuryResponse>,
            tonic::Status,
        >;
    }
    /// Defines the Msg interface of the module.
    #[derive(Debug)]
    pub struct MsgServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MsgServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MsgServer<T>
    where
        T: Msg,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/neutron.revenue.Msg/UpdateParams" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateParamsSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgUpdateParams>
                    for UpdateParamsSvc<T> {
                        type Response = super::MsgUpdateParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgUpdateParams>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::update_params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateParamsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/neutron.revenue.Msg/FundTreasury" => {
                    #[allow(non_camel_case_types)]
                    struct FundTreasurySvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgFundTreasury>
                    for FundTreasurySvc<T> {
                        type Response = super::MsgFundTreasuryResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgFundTreasury>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Msg>::fund_treasury(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FundTreasurySvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for MsgServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "neutron.revenue.Msg";
    impl<T> tonic::server::NamedService for MsgServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// Request type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.QueryParamsRequest".into()
    }
}
/// Response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryParamsResponse {
    /// Contains all parameters of the module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.QueryParamsResponse".into()
    }
}
/// Request type for the Query/PaymentInfo RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryPaymentInfoRequest {}
impl ::prost::Name for QueryPaymentInfoRequest {
    const NAME: &'static str = "QueryPaymentInfoRequest";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.QueryPaymentInfoRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.QueryPaymentInfoRequest".into()
    }
}
/// Response type for the Query/PaymentInfo RPC method.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryPaymentInfoResponse {
    /// The current payment schedule.
    #[prost(message, optional, tag = "1")]
    pub payment_schedule: ::core::option::Option<PaymentSchedule>,
    /// Revenue amount multiplier value that corresponds to the effective payment period progress.
    #[prost(string, tag = "2")]
    pub effective_period_progress: ::prost::alloc::string::String,
    /// The current TWAP of the reward asset in quote asset. Is calculated as:
    /// twap_from_time_t(n)\_to_time_t(m) = (cumulative_price_at_t(n) - cumulative_price_at_t(m)) / (t(n) - t(m))
    #[prost(string, tag = "3")]
    pub reward_asset_twap: ::prost::alloc::string::String,
    /// The current evaluation of the base revenue amount. This is the maximum amount a validator can
    /// receive in the current price condition if not affected with reducing factors (e.g. imperfect
    /// performance, incomplete payment period, partial validator set presence).
    #[prost(message, optional, tag = "4")]
    pub base_revenue_amount: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for QueryPaymentInfoResponse {
    const NAME: &'static str = "QueryPaymentInfoResponse";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.QueryPaymentInfoResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.QueryPaymentInfoResponse".into()
    }
}
/// Request type for the Query/ValidatorStats RPC method.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryValidatorStatsRequest {
    /// The validator's node operator address.
    #[prost(string, tag = "1")]
    pub val_oper_address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryValidatorStatsRequest {
    const NAME: &'static str = "QueryValidatorStatsRequest";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.QueryValidatorStatsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.QueryValidatorStatsRequest".into()
    }
}
/// Response type for the Query/ValidatorStats RPC method.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryValidatorStatsResponse {
    /// Contains the validator's information.
    #[prost(message, optional, tag = "1")]
    pub stats: ::core::option::Option<ValidatorStats>,
}
impl ::prost::Name for QueryValidatorStatsResponse {
    const NAME: &'static str = "QueryValidatorStatsResponse";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.QueryValidatorStatsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.QueryValidatorStatsResponse".into()
    }
}
/// Request type for the Query/ValidatorsStats RPC method.
#[derive(Clone, Copy, PartialEq, Eq, Hash, ::prost::Message)]
pub struct QueryValidatorsStatsRequest {}
impl ::prost::Name for QueryValidatorsStatsRequest {
    const NAME: &'static str = "QueryValidatorsStatsRequest";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.QueryValidatorsStatsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.QueryValidatorsStatsRequest".into()
    }
}
/// Response type for the Query/ValidatorsStats RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryValidatorsStatsResponse {
    /// Contains the validators' information.
    #[prost(message, repeated, tag = "1")]
    pub stats: ::prost::alloc::vec::Vec<ValidatorStats>,
}
impl ::prost::Name for QueryValidatorsStatsResponse {
    const NAME: &'static str = "QueryValidatorsStatsResponse";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.QueryValidatorsStatsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.QueryValidatorsStatsResponse".into()
    }
}
/// Contains validator's info and their performance rating.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct ValidatorStats {
    /// Contains the validator's information.
    #[prost(message, optional, tag = "1")]
    pub validator_info: ::core::option::Option<ValidatorInfo>,
    /// The total number of blocks produced by the chain in the current payment period.
    #[prost(uint64, tag = "2")]
    pub total_produced_blocks_in_period: u64,
    /// The validator's performance rating. Represented as a decimal value.
    #[prost(string, tag = "3")]
    pub performance_rating: ::prost::alloc::string::String,
    /// Contains expected revenue for the validator based on their performance rating in the current
    /// payment period, current reward asset TWAP, and duration of validator's presence in the active
    /// validator set. Does not take into account effective payment period progress.
    #[prost(message, optional, tag = "4")]
    pub expected_revenue: ::core::option::Option<
        cosmos_sdk_proto::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for ValidatorStats {
    const NAME: &'static str = "ValidatorStats";
    const PACKAGE: &'static str = "neutron.revenue";
    fn full_name() -> ::prost::alloc::string::String {
        "neutron.revenue.ValidatorStats".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/neutron.revenue.ValidatorStats".into()
    }
}
/// Generated client implementations.
#[cfg(feature = "client")]
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Defines the Query interface of the module.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "transport")]
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Fetches the current parameters of the revenue module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.revenue.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("neutron.revenue.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// Fetches the current payment info of the module such as payment schedule and revenue details.
        pub async fn payment_info(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryPaymentInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPaymentInfoResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.revenue.Query/PaymentInfo",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("neutron.revenue.Query", "PaymentInfo"));
            self.inner.unary(req, path, codec).await
        }
        /// Fetches a given validator's stats from the revenue module's state.
        pub async fn validator_stats(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryValidatorStatsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryValidatorStatsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.revenue.Query/ValidatorStats",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("neutron.revenue.Query", "ValidatorStats"));
            self.inner.unary(req, path, codec).await
        }
        /// Fetches all validators' stats from the revenue module's state.
        pub async fn validators_stats(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryValidatorsStatsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryValidatorsStatsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic_prost::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/neutron.revenue.Query/ValidatorsStats",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("neutron.revenue.Query", "ValidatorsStats"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "server")]
pub mod query_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryServer.
    #[async_trait]
    pub trait Query: std::marker::Send + std::marker::Sync + 'static {
        /// Fetches the current parameters of the revenue module.
        async fn params(
            &self,
            request: tonic::Request<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        >;
        /// Fetches the current payment info of the module such as payment schedule and revenue details.
        async fn payment_info(
            &self,
            request: tonic::Request<super::QueryPaymentInfoRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryPaymentInfoResponse>,
            tonic::Status,
        >;
        /// Fetches a given validator's stats from the revenue module's state.
        async fn validator_stats(
            &self,
            request: tonic::Request<super::QueryValidatorStatsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryValidatorStatsResponse>,
            tonic::Status,
        >;
        /// Fetches all validators' stats from the revenue module's state.
        async fn validators_stats(
            &self,
            request: tonic::Request<super::QueryValidatorsStatsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryValidatorsStatsResponse>,
            tonic::Status,
        >;
    }
    /// Defines the Query interface of the module.
    #[derive(Debug)]
    pub struct QueryServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> QueryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryServer<T>
    where
        T: Query,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/neutron.revenue.Query/Params" => {
                    #[allow(non_camel_case_types)]
                    struct ParamsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryParamsRequest>
                    for ParamsSvc<T> {
                        type Response = super::QueryParamsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryParamsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::params(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ParamsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/neutron.revenue.Query/PaymentInfo" => {
                    #[allow(non_camel_case_types)]
                    struct PaymentInfoSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryPaymentInfoRequest>
                    for PaymentInfoSvc<T> {
                        type Response = super::QueryPaymentInfoResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryPaymentInfoRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::payment_info(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = PaymentInfoSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/neutron.revenue.Query/ValidatorStats" => {
                    #[allow(non_camel_case_types)]
                    struct ValidatorStatsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryValidatorStatsRequest>
                    for ValidatorStatsSvc<T> {
                        type Response = super::QueryValidatorStatsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryValidatorStatsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::validator_stats(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidatorStatsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/neutron.revenue.Query/ValidatorsStats" => {
                    #[allow(non_camel_case_types)]
                    struct ValidatorsStatsSvc<T: Query>(pub Arc<T>);
                    impl<
                        T: Query,
                    > tonic::server::UnaryService<super::QueryValidatorsStatsRequest>
                    for ValidatorsStatsSvc<T> {
                        type Response = super::QueryValidatorsStatsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryValidatorsStatsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::validators_stats(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ValidatorsStatsSvc(inner);
                        let codec = tonic_prost::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for QueryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "neutron.revenue.Query";
    impl<T> tonic::server::NamedService for QueryServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
